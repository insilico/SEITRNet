v0_earth <- c(-29794.2199907, -4924.33333333,-2135.59540741)*(86400)/1e3
# m/s -> km/day
x0_moon <- c(-27083318944, 133232649728, 57770257344)/1e3 # km
v0_moon <- c(-30864.2207031, -4835.03349304, -2042.89546204)*(86400)/1e3
# m/s -> km/day
state <- c(x0_earth, v0_earth, x0_moon, v0_moon)
# Time points to solve at
times <- seq(0, 365, by = 1)
# Solve the system of equations
out <- ode(y = state, times = times, func = orbital_mechanics, parms = NULL, method = "rk4")
# Convert output to data frame
orb_sol <- as.data.frame(out)
names(orb_sol) <- c("time", "x_earth", "y_earth", "z_earth", "vx_earth", "vy_earth", "vz_earth", "x_moon", "y_moon", "z_moon", "vx_moon", "vy_moon", "vz_moon")
dist_earth_moon <- sqrt(sum((orb_sol$x_moon - orb_sol$x_earth)^2 + (orb_sol$y_moon - orb_sol$y_earth)^2 + (orb_sol$z_moon - orb_sol$z_earth)^2))
dist_earth_sun <- sqrt(sum(orb_sol$x_earth^2 + orb_sol$y_earth^2 + orb_sol$z_earth^2))
# Calculate the average distances over a year
avg_dist_earth_moon <- mean(dist_earth_moon)
avg_dist_earth_sun <- mean(dist_earth_sun)
avg_dist_earth_moon
avg_dist_earth_sun
# Question 4
# Orbital Mechanics
# a.
# Define the parameters
G <- 6.673e-11 * (1e3)^3 / (86400)^2  # km^3 kg-1 day-2
M_S <- 1.9891e30 # sun kg
M_E <- 5.98e24   # earth kg
M_m <- 7.32e22   # moon kg
mu_sun <- G*M_S*(86400^2)/1e9 #  km^3/days^2
# Define the system of equations
orbital_mechanics <- function(t, state, parameters) {
x_earth <- state[1:3]
v_earth <- state[4:6]
x_moon <- state[7:9]
v_moon <- state[10:12]
dx_earth <- v_earth
dv_earth <- -mu_sun * x_earth / sum(x_earth^2)^(3/2)
dx_moon <- v_moon
dv_moon <- -mu_sun * (x_moon - x_earth) / sum((x_moon - x_earth)^2)^(3/2)
return(list(c(dx_earth, dv_earth, dx_moon, dv_moon)))
}
# Initial conditions
x0_earth <- c(-27115219762.4, 132888652547.0, 57651255508.0)/1e3 # km
v0_earth <- c(-29794.2199907, -4924.33333333,-2135.59540741)*(86400)/1e3
# m/s -> km/day
x0_moon <- c(-27083318944, 133232649728, 57770257344)/1e3 # km
v0_moon <- c(-30864.2207031, -4835.03349304, -2042.89546204)*(86400)/1e3
# m/s -> km/day
state <- c(x0_earth, v0_earth, x0_moon, v0_moon)
# Time points to solve at
times <- seq(0, 365, by = 1)
# Solve the system of equations
out <- ode(y = state, times = times, func = orbital_mechanics, parms = NULL, method = "rk4")
# Convert output to data frame
orb_sol <- as.data.frame(out)
names(orb_sol) <- c("time", "x_earth", "y_earth", "z_earth", "vx_earth", "vy_earth", "vz_earth", "x_moon", "y_moon", "z_moon", "vx_moon", "vy_moon", "vz_moon")
dist_earth_moon <- sqrt((orb_sol$x_moon - orb_sol$x_earth)^2 + (orb_sol$y_moon - orb_sol$y_earth)^2 + (orb_sol$z_moon - orb_sol$z_earth)^2)
# Calculate the distance between the Earth and Sun at each time step
dist_earth_sun <- sqrt(orb_sol$x_earth^2 + orb_sol$y_earth^2 + orb_sol$z_earth^2)
# Calculate the average distances over a year
avg_dist_earth_moon <- mean(dist_earth_moon)
avg_dist_earth_sun <- mean(dist_earth_sun)
avg_dist_earth_moon
avg_dist_earth_sun
G <- 6.673e-11   # m^3 kg^-1 s^-2
M_S <- 1.9891e30 # sun kg
M_E <- 5.98e24   # earth kg
M_m <- 7.32e22   # moon kg
mu_sun <- G*M_S*(86400^2)/1e9 # km^3/days^2
# Initial conditions
t0 <- 0
t_end <- 365.25 # 1 year in days
# Earth initial conditions
x0_earth <- c(-27115219762.4, 132888652547.0, 57651255508.0)/1e3 # km
v0_earth <- c(-29794.2199907, -4924.33333333, -2135.59540741)*(86400)/1e3 # km/day
# Moon initial conditions
x0_moon <- c(-27083318944, 133232649728, 57770257344)/1e3 # km
v0_moon <- c(-30864.2207031, -4835.03349304, -2042.89546204)*(86400)/1e3 # km/day
# Function to calculate acceleration
calculate_acceleration <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
r_earth_moon <- sqrt(sum((x_earth - x_moon)^2))
r_earth_sun <- sqrt(sum(x_earth^2))
a_earth <- -G * M_S / r_earth_sun^3 * x_earth - G * M_m / r_earth_moon^3 * (x_earth - x_moon)
a_moon <- -G * M_S / r_earth_sun^3 * x_moon - G * M_E / r_earth_moon^3 * (x_moon - x_earth)
return(list(c(a_earth, a_moon)))
})
}
# Initial state
initial_state <- c(x_earth = x0_earth, x_moon = x0_moon, v_earth = v0_earth, v_moon = v0_moon)
# Time vector
times <- seq(t0, t_end, by = 1) # Integration steps of 1 day
# Solve the system of ODEs
solution <- ode(y = initial_state, times = times, func = calculate_acceleration, parms = NULL)
# Question 4
# Orbital Mechanics
# a.
# Define the parameters
# Constants
G <- 6.673e-11   # m^3 kg-1 s^-2
M_S <- 1.9891e30 # sun kg
M_E <- 5.98e24   # earth kg
M_m <- 7.32e22   # moon kg
mu_sun <- G*M_S*(86400^2)/1e9 #  km^3/days^2
# Initial conditions
x0_earth <- c(-27115219762.4, 132888652547.0, 57651255508.0)/1e3 # km
v0_earth <- c(-29794.2199907, -4924.33333333,-2135.59540741)*(86400)/1e3
x0_moon <- c(-27083318944, 133232649728, 57770257344)/1e3 # km
v0_moon <- c(-30864.2207031, -4835.03349304, -2042.89546204)*(86400)/1e3
# Define the system of differential equations
model <- function(t, y, parameters) {
# Unpack the state vector
x_earth <- y[1:3]
v_earth <- y[4:6]
x_moon <- y[7:9]
v_moon <- y[10:12]
# Compute the force on the Earth and the Moon
F_earth <- -G * M_S * M_E / norm(x_earth, type="2")^3 * x_earth
F_moon <- -G * M_S * M_m / norm(x_moon, type="2")^3 * x_moon
# Return the derivatives
list(c(v_earth, F_earth/M_E, v_moon, F_moon/M_m))
}
# Initial state vector
y0 <- c(x0_earth, v0_earth, x0_moon, v0_moon)
# Time points
times <- seq(0, 365, by=1) # days
# Solve the system of differential equations
out <- ode(y = y0, times = times, func = model, parms = NULL)
# Define the system of differential equations
model <- function(t, y, parameters) {
# Unpack the state vector
x_earth <- y[1:3]
v_earth <- y[4:6]
x_moon <- y[7:9]
v_moon <- y[10:12]
# Compute the force on the Earth and the Moon
F_earth <- -G * M_S * M_E / norm(x_earth, type="2")^3 * x_earth
F_moon <- -G * M_S * M_m / norm(x_moon, type="2")^3 * x_moon
# Return the derivatives
list(c(v_earth, F_earth/M_E, v_moon, F_moon/M_m))
}
# Initial state vector
y0 <- c(x0_earth, v0_earth, x0_moon, v0_moon)
# Time points
times <- seq(0, 365, by=1) # days
# Solve the system of differential equations
out <- ode(y = y0, times = times, func = model, parms = NULL)
# Initialize arrays to store distances
dist_earth_moon <- numeric(length(times))
dist_earth_sun <- numeric(length(times))
# Iterate over the output
for (i in 1:nrow(out)) {
# Compute the distances
dist_earth_moon[i] <- sqrt(sum((out[i, 1:3] - out[i, 7:9])^2))
dist_earth_sun[i] <- sqrt(sum((out[i, 1:3])^2))
}
# Compute the average distances
avg_dist_earth_moon <- mean(dist_earth_moon)
avg_dist_earth_sun <- mean(dist_earth_sun)
print(paste("Average distance between Earth and Moon: ", avg_dist_earth_moon, " km"))
print(paste("Average distance between Earth and Sun: ", avg_dist_earth_sun, " km"))
# Extract the positions of the Earth and the Moon from the output
x_earth <- out[, "x_earth"]
# Question 4
# Orbital Mechanics
# a.
# Define the parameters
# Constants
G <- 6.673e-11   # m^3 kg-1 s^-2
M_S <- 1.9891e30 # sun kg
M_E <- 5.98e24   # earth kg
M_m <- 7.32e22   # moon kg
mu_sun <- G*M_S*(86400^2)/1e9 #  km^3/days^2
# Initial conditions
x0_earth <- c(-27115219762.4, 132888652547.0, 57651255508.0)/1e3 # km
v0_earth <- c(-29794.2199907, -4924.33333333,-2135.59540741)*(86400)/1e3
x0_moon <- c(-27083318944, 133232649728, 57770257344)/1e3 # km
v0_moon <- c(-30864.2207031, -4835.03349304, -2042.89546204)*(86400)/1e3
# Define the system of differential equations
model <- function(t, y, parameters) {
# Unpack the state vector
x_earth <- y[1:3]
v_earth <- y[4:6]
x_moon <- y[7:9]
v_moon <- y[10:12]
# Compute the force on the Earth and the Moon
F_earth <- -G * M_S * M_E / norm(x_earth, type="2")^3 * x_earth
F_moon <- -G * M_S * M_m / norm(x_moon, type="2")^3 * x_moon
# Return the derivatives
list(c(v_earth, F_earth/M_E, v_moon, F_moon/M_m))
}
# Initial state vector
y0 <- c(x0_earth, v0_earth, x0_moon, v0_moon)
# Time points
times <- seq(0, 365, by=1) # days
# Solve the system of differential equations
out <- ode(y = y0, times = times, func = model, parms = NULL)
# Initialize arrays to store distances
dist_earth_moon <- numeric(length(times))
dist_earth_sun <- numeric(length(times))
# Iterate over the output
for (i in 1:nrow(out)) {
# Compute the distances
dist_earth_moon[i] <- sqrt(sum((out[i, 1:3] - out[i, 7:9])^2))
dist_earth_sun[i] <- sqrt(sum((out[i, 1:3])^2))
}
# Compute the average distances
avg_dist_earth_moon <- mean(dist_earth_moon)
avg_dist_earth_sun <- mean(dist_earth_sun)
print(paste("Average distance between Earth and Moon: ", avg_dist_earth_moon, " km"))
print(paste("Average distance between Earth and Sun: ", avg_dist_earth_sun, " km"))
# Extract the positions of the Earth and the Moon from the output
x_earth <- out[, "x_earth"]
# Extract the positions of the Earth and the Moon from the output
x_earth <- out[, "2"]
y_earth <- out[, "3"]
z_earth <- out[, "4"]
x_moon <- out[, "8"]
y_moon <- out[, "9"]
z_moon <- out[, "10"]
# Create a 3D scatter plot of the Earth's position
p <- plot_ly(x = ~x_earth, y = ~y_earth, z = ~z_earth, type = "scatter3d", mode = "lines",
line = list(color = '#1f77b4', width = 2), name = "Earth")
# Add the Moon's position to the plot
p <- add_trace(p, x = ~x_moon, y = ~y_moon, z = ~z_moon, type = "scatter3d", mode = "lines",
line = list(color = '#ff7f0e', width = 2), name = "Moon")
# Set the plot layout
layout <- list(scene = list(xaxis = list(title = "X (km)"),
yaxis = list(title = "Y (km)"),
zaxis = list(title = "Z (km)")),
title = "Positions of the Earth and Moon Over a Year")
# Apply the layout to the plot
p <- layout(p, layout)
# Print the plot
print(p)
# Question 4
# Orbital Mechanics
# a.
# Define the parameters
# Constants
G <- 6.673e-11   # m^3 kg-1 s^-2
M_S <- 1.9891e30 # sun kg
M_E <- 5.98e24   # earth kg
M_m <- 7.32e22   # moon kg
mu_sun <- G*M_S*(86400^2)/1e9 #  km^3/days^2
# Initial conditions
x0_earth <- c(-27115219762.4, 132888652547.0, 57651255508.0)/1e3 # km
v0_earth <- c(-29794.2199907, -4924.33333333,-2135.59540741)*(86400)/1e3
x0_moon <- c(-27083318944, 133232649728, 57770257344)/1e3 # km
v0_moon <- c(-30864.2207031, -4835.03349304, -2042.89546204)*(86400)/1e3
# Define the system of differential equations
model <- function(t, y, parameters) {
# Unpack the state vector
x_earth <- y[1:3]
v_earth <- y[4:6]
x_moon <- y[7:9]
v_moon <- y[10:12]
# Compute the force on the Earth and the Moon
F_earth <- -G * M_S * M_E / norm(x_earth, type="2")^3 * x_earth
F_moon <- -G * M_S * M_m / norm(x_moon, type="2")^3 * x_moon
# Return the derivatives
list(c(v_earth, F_earth/M_E, v_moon, F_moon/M_m))
}
# Initial state vector
y0 <- c(x0_earth, v0_earth, x0_moon, v0_moon)
# Time points
times <- seq(0, 365, by=1) # days
# Solve the system of differential equations
out <- ode(y = y0, times = times, func = model, parms = NULL)
# Initialize arrays to store distances
dist_earth_moon <- numeric(length(times))
dist_earth_sun <- numeric(length(times))
# Iterate over the output
for (i in 1:nrow(out)) {
# Compute the distances
dist_earth_moon[i] <- sqrt(sum((out[i, 1:3] - out[i, 7:9])^2))
dist_earth_sun[i] <- sqrt(sum((out[i, 1:3])^2))
}
# Compute the average distances
avg_dist_earth_moon <- mean(dist_earth_moon)
avg_dist_earth_sun <- mean(dist_earth_sun)
print(paste("Average distance between Earth and Moon: ", avg_dist_earth_moon, " km"))
print(paste("Average distance between Earth and Sun: ", avg_dist_earth_sun, " km"))
# Extract the positions of the Earth and the Moon from the output
x_earth <- out[, "2"]
y_earth <- out[, "3"]
z_earth <- out[, "4"]
x_moon <- out[, "8"]
y_moon <- out[, "9"]
z_moon <- out[, "10"]
# Create a 3D scatter plot of the Earth's position
p <- plot_ly(x = ~x_earth, y = ~y_earth, z = ~z_earth, type = "scatter3d", mode = "lines",
line = list(color = '#1f77b4', width = 2), name = "Earth")
# Add the Moon's position to the plot
p <- add_trace(p, x = ~x_moon, y = ~y_moon, z = ~z_moon, type = "scatter3d", mode = "lines",
line = list(color = '#ff7f0e', width = 2), name = "Moon")
# Set the plot layout
layout <- list(scene = list(xaxis = list(title = "X (km)"),
yaxis = list(title = "Y (km)"),
zaxis = list(title = "Z (km)")),
title = "Positions of the Earth and Moon Over a Year")
# Apply the layout to the plot
p <- layout(p, layout)
# Print the plot
print(p)
# Create a 3D scatter plot of the Earth's position
p <- plot_ly(x = ~x_earth, y = ~y_earth, z = ~z_earth, type = "scatter3d", mode = "lines",
line = list(color = '#1f77b4', width = 2), name = "Earth")
# Add the Moon's position to the plot
p <- add_trace(p, x = ~x_moon, y = ~y_moon, z = ~z_moon, type = "scatter3d", mode = "lines",
line = list(color = '#ff7f0e', width = 2), name = "Moon")
layout <- list(scene = list(xaxis = list(title = "X (km)", range = c(min(c(x_earth, x_moon)), max(c(x_earth, x_moon)))),
yaxis = list(title = "Y (km)", range = c(min(c(y_earth, y_moon)), max(c(y_earth, y_moon)))),
zaxis = list(title = "Z (km)", range = c(min(c(z_earth, z_moon)), max(c(z_earth, z_moon))))),
title = "Positions of the Earth and Moon Over a Year")
# Apply the layout to the plot
p <- layout(p, layout)
# Print the plot
print(p)
# Question 4
# Orbital Mechanics
# a.
# Define the parameters
# Constants
G <- 6.673e-11 * (1e3)^3 / (86400)^2  # km^3 kg-1 day-2
M_S <- 1.9891e30 # sun kg
M_E <- 5.98e24   # earth kg
M_m <- 7.32e22   # moon kg
mu_sun <- G*M_S*(86400^2)/1e9 #  km^3/days^2
# Initial conditions
x0_earth <- c(-27115219762.4, 132888652547.0, 57651255508.0)/1e3 # km
v0_earth <- c(-29794.2199907, -4924.33333333,-2135.59540741)*(86400)/1e3
x0_moon <- c(-27083318944, 133232649728, 57770257344)/1e3 # km
v0_moon <- c(-30864.2207031, -4835.03349304, -2042.89546204)*(86400)/1e3
# Define the system of differential equations
model <- function(t, y, parameters) {
# Unpack the state vector
x_earth <- y[1:3]
v_earth <- y[4:6]
x_moon <- y[7:9]
v_moon <- y[10:12]
# Compute the force on the Earth and the Moon
F_earth <- -G * M_S * M_E / norm(x_earth, type="2")^3 * x_earth
F_moon <- -G * M_S * M_m / norm(x_moon, type="2")^3 * x_moon
# Return the derivatives
list(c(v_earth, F_earth/M_E, v_moon, F_moon/M_m))
}
# Initial state vector
y0 <- c(x0_earth, v0_earth, x0_moon, v0_moon)
# Time points
times <- seq(0, 365, by=1) # days
# Solve the system of differential equations
out <- ode(y = y0, times = times, func = model, parms = NULL)
# Initialize arrays to store distances
dist_earth_moon <- numeric(length(times))
dist_earth_sun <- numeric(length(times))
# Iterate over the output
for (i in 1:nrow(out)) {
# Compute the distances
dist_earth_moon[i] <- sqrt(sum((out[i, 1:3] - out[i, 7:9])^2))
dist_earth_sun[i] <- sqrt(sum((out[i, 1:3])^2))
}
# Compute the average distances
avg_dist_earth_moon <- mean(dist_earth_moon)
avg_dist_earth_sun <- mean(dist_earth_sun)
print(paste("Average distance between Earth and Moon: ", avg_dist_earth_moon, " km"))
print(paste("Average distance between Earth and Sun: ", avg_dist_earth_sun, " km"))
# Question 4
# Orbital Mechanics
# a.
# Define the parameters
# Constants
G <- 6.673e-11   # m^3 kg-1 s^-2
M_S <- 1.9891e30 # sun kg
M_E <- 5.98e24   # earth kg
M_m <- 7.32e22   # moon kg
mu_sun <- G*M_S*(86400^2)/1e9 #  km^3/days^2
# Initial conditions
x0_earth <- c(-27115219762.4, 132888652547.0, 57651255508.0)/1e3 # km
v0_earth <- c(-29794.2199907, -4924.33333333,-2135.59540741)*(86400)/1e3
x0_moon <- c(-27083318944, 133232649728, 57770257344)/1e3 # km
v0_moon <- c(-30864.2207031, -4835.03349304, -2042.89546204)*(86400)/1e3
# Define the system of differential equations
model <- function(t, y, parameters) {
# Unpack the state vector
x_earth <- y[1:3]
v_earth <- y[4:6]
x_moon <- y[7:9]
v_moon <- y[10:12]
# Compute the force on the Earth and the Moon
F_earth <- -G * M_S * M_E / norm(x_earth, type="2")^3 * x_earth
F_moon <- -G * M_S * M_m / norm(x_moon, type="2")^3 * x_moon
# Return the derivatives
list(c(v_earth, F_earth/M_E, v_moon, F_moon/M_m))
}
# Initial state vector
y0 <- c(x0_earth, v0_earth, x0_moon, v0_moon)
# Time points
times <- seq(0, 365, by=1) # days
# Solve the system of differential equations
out <- ode(y = y0, times = times, func = model, parms = NULL)
# Initialize arrays to store distances
dist_earth_moon <- numeric(length(times))
dist_earth_sun <- numeric(length(times))
# Iterate over the output
for (i in 1:nrow(out)) {
# Compute the distances
dist_earth_moon[i] <- sqrt(sum((out[i, 1:3] - out[i, 7:9])^2))
dist_earth_sun[i] <- sqrt(sum((out[i, 1:3])^2))
}
# Compute the average distances
avg_dist_earth_moon <- mean(dist_earth_moon)
avg_dist_earth_sun <- mean(dist_earth_sun)
print(paste("Average distance between Earth and Moon: ", avg_dist_earth_moon, " km"))
print(paste("Average distance between Earth and Sun: ", avg_dist_earth_sun, " km"))
# Extract the positions of the Earth and the Moon from the output
x_earth <- out[, "2"]
y_earth <- out[, "3"]
z_earth <- out[, "4"]
x_moon <- out[, "8"]
y_moon <- out[, "9"]
z_moon <- out[, "10"]
# Create a 3D scatter plot of the Earth's position
p <- plot_ly(x = ~x_earth, y = ~y_earth, z = ~z_earth, type = "scatter3d", mode = "lines",
line = list(color = '#1f77b4', width = 2), name = "Earth")
# Add the Moon's position to the plot
p <- add_trace(p, x = ~x_moon, y = ~y_moon, z = ~z_moon, type = "scatter3d", mode = "lines",
line = list(color = '#ff7f0e', width = 2), name = "Moon")
layout <- list(scene = list(xaxis = list(title = "X (km)", range = c(min(c(x_earth, x_moon)), max(c(x_earth, x_moon)))),
yaxis = list(title = "Y (km)", range = c(min(c(y_earth, y_moon)), max(c(y_earth, y_moon)))),
zaxis = list(title = "Z (km)", range = c(min(c(z_earth, z_moon)), max(c(z_earth, z_moon))))),
title = "Positions of the Earth and Moon Over a Year")
# Apply the layout to the plot
p <- layout(p, layout)
# Print the plot
print(p)
# b.
dot_products <- numeric(length(times))
for (i in 1:nrow(out)) {
vector_earth_sun <- -out[i, 2:4]
vector_earth_moon <- out[i, 8:10] - out[i, 2:4]
# Normalize the vectors
vector_earth_sun <- vector_earth_sun / sqrt(sum(vector_earth_sun^2))
vector_earth_moon <- vector_earth_moon / sqrt(sum(vector_earth_moon^2))
dot_products[i] <- sum(vector_earth_sun * vector_earth_moon)
}
eclipse_times <- times[abs(dot_products) > 0.999]
print(eclipse_times)
median_eclipse_time <- median(eclipse_times)
start_date <- as.Date("1999-01-01")
median_eclipse_date <- start_date + median_eclipse_time
print(median_eclipse_date)
# c.
# Define the system of differential equations with the orbiter
model <- function(t, y, parameters) {
# Unpack the state vector
x_earth <- y[1:3]
v_earth <- y[4:6]
x_orbiter <- y[7:9]
v_orbiter <- y[10:12]
# Compute the force on the Earth and the orbiter
F_earth <- -G * M_S * M_E / norm(x_earth, type="2")^3 * x_earth
F_orbiter <- -G * M_S * M_E / norm(x_orbiter, type="2")^3 * x_orbiter
# Return the derivatives
list(c(v_earth, F_earth/M_E, v_orbiter, F_orbiter/M_E))
}
# Initial guess for the L2 distance
L2_guess <- 1.5e6 # km
# Function to compute the new guess for the L2 distance
g <- function(L2) {
# Initial position and velocity of the orbiter
x0_orbiter <- (norm(x0_earth, type="2") + L2) * x0_earth / norm(x0_earth, type="2")
v0_orbiter <- sqrt(G * M_S / norm(x0_orbiter, type="2")) * v0_earth / norm(v0_earth, type="2")
# Initial state vector
y0 <- c(x0_earth, v0_earth, x0_orbiter, v0_orbiter)
# Solve the system of differential equations
out <- ode(y = y0, times = times, func = model, parms = NULL)
# Compute the average distance between the Earth and the orbiter over the year
avg_distance <- mean(sqrt(rowSums((out[, 1:3] - out[, 7:9])^2)))
# Return the difference between the average distance and the guess for the L2 distance
avg_distance - L2
}
# Use the relaxation method to find the L2 distance
result <- findZeroRelax(g, L2_guess)
# Print the result
print(paste("L2 distance: ", result$x_zero, " km"))
print(paste("Number of steps: ", result$steps))
# c.
# model with the orbiter
model <- function(t, y, parameters) {
x_earth <- y[1:3]
v_earth <- y[4:6]
x_orbiter <- y[7:9]
v_orbiter <- y[10:12]
# Compute the force on the Earth and the orbiter
F_earth <- -G * M_S * M_E / norm(x_earth, type="2")^3 * x_earth
F_orbiter <- -G * M_S * M_E / norm(x_orbiter, type="2")^3 * x_orbiter
list(c(v_earth, F_earth/M_E, v_orbiter, F_orbiter/M_E))
}
L2_guess <- 1.5e6 # km
g <- function(L2) {
x0_orbiter <- (norm(x0_earth, type="2") + L2) * x0_earth / norm(x0_earth, type="2")
v0_orbiter <- sqrt(G * M_S / norm(x0_orbiter, type="2")) * v0_earth / norm(v0_earth, type="2")
y0 <- c(x0_earth, v0_earth, x0_orbiter, v0_orbiter)
out <- ode(y = y0, times = times, func = model, parms = NULL)
avg_distance <- mean(sqrt(rowSums((out[, 1:3] - out[, 7:9])^2)))
avg_distance - L2
}
result <- findZeroRelax(g, L2_guess)
print(paste("L2 distance: ", result$x_zero, " km"))
print(paste("Number of steps: ", result$steps))
setwd("C:/Users/slm/Desktop/SEITRNet/R")
